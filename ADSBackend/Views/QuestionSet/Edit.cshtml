@using Scholarships.Models.Forms
@model Scholarships.Models.Forms.QuestionSetViewModel


<div class="ibox">
    <div class="ibox-title">
        <div style="float: right" id="saveMessage"></div>
        <h4>Question Set</h4>
    </div>
    <div class="ibox-content">
        <form asp-controller="QuestionSet" asp-action="Edit" id="QuestionSetForm_@Model.FormId">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="@Model.QuestionSet.Name" class="control-label"></label>
                <input asp-for="@Model.QuestionSet.Name" class="form-control" />
                <span asp-validation-for="@Model.QuestionSet.Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="@Model.QuestionSet.Description" class="control-label"></label>
                <input asp-for="@Model.QuestionSet.Description" class="form-control" />
                <span asp-validation-for="@Model.QuestionSet.Description" class="text-danger"></span>
            </div>
            <div class="form-row">
                <div class="form-group col-md-4">
                    <label asp-for="@Model.QuestionSet.SingularName" class="control-label"></label>
                    <input asp-for="@Model.QuestionSet.SingularName" class="form-control" />
                    <span asp-validation-for="@Model.QuestionSet.SingularName" class="text-danger"></span>
                </div>
                <div class="form-group col-md-3">
                    <label asp-for="@Model.QuestionSet.PluralName" class="control-label"></label>
                    <input asp-for="@Model.QuestionSet.PluralName" class="form-control" />
                    <span asp-validation-for="@Model.QuestionSet.PluralName" class="text-danger"></span>
                </div>
            </div>
            <div class="form-group">
                <label asp-for="@Model.QuestionSet.AllowMultiple" class="control-label"></label>
                <div class="checkbox">

                    <input type="radio" asp-for="@Model.QuestionSet.AllowMultiple" value="true" /> Yes<br/>
                    <input type="radio" asp-for="@Model.QuestionSet.AllowMultiple" value="false" /> No<br/>
                </div>

                <span asp-validation-for="@Model.QuestionSet.AllowMultiple" class="text-danger"></span>
            </div>
        </form>
        <div id="QuestionSet_Questions">
            @await Html.PartialAsync("_QuestionFormPartial", @Model);
        </div>
        <button type="button" onclick="addQuestion()" class="btn btn-primary btn-lg"><i class="fa fa-plus"></i> Add Question</button>

    </div>
</div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "__AjaxAntiForgeryForm" }))
{
    @Html.AntiForgeryToken()
}

@section Styles
{
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.9/dist/css/bootstrap-select.min.css">
}


@section Scripts
{
    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.9/dist/js/bootstrap-select.min.js"></script>

    <script type="text/javascript">

        function saveForm(formid) {
            var post_url = $(formid).attr("action"); //get form action url
            var form_data = $(formid).serialize(); //Encode form elements for submission

            $("#saveMessage").hide();

            if ($(formid).valid()) {
                $("#saveMessage").html("Saving...").fadeIn(200);

                $.ajax({
                        type: "POST",
                        url: post_url,
                        data: form_data,
                        dataType: "json"
                    }).done(function(response, textStatus, jqXHR) {
                        if (!response.isError) {
                            $("#saveMessage").html("All changes saved");
                        } else if (response.Status === "InvalidRequest") {
                            $("#saveMessage").html("Unable to save - Please fix errors");
                            displayValidationErrors(response.modelStateErrors);
                        }
                    })
                    .fail(function(jqXHR, textStatus, errorThrown) {
                        $("#saveMessage").html("Error saving form!");
                    })
                    .always(function() {

                        $("#saveMessage").delay(4000).fadeOut();
                    });

            }
        }

        function saveQuestionsForm(formid) {
            var post_url = $(formid).attr("action"); //get form action url
            var form_data = $(formid).serialize(); //Encode form elements for submission

            $("#saveMessage").hide();

            $("#saveMessage").html("Saving...").fadeIn(200);

            $.ajax({
                    type: "POST",
                    url: post_url,
                    data: form_data,
                    dataType: "json"
            }).done(function (response, textStatus, jqXHR) {

                    if (!response.isError) {
                        $("#saveMessage").html("All changes saved");
                    } else if (response.Status === "InvalidRequest") {
                        $("#saveMessage").html("Unable to save - Please fix errors");
                        displayValidationErrors(response.modelStateErrors);
                    }
                })
                .fail(function(jqXHR, textStatus, errorThrown) {
                    $("#saveMessage").html("Error saving form!");
                })
                .always(function() {

                    $("#saveMessage").delay(4000).fadeOut();
                });
        }

        function addQuestion() {

            var qsetId = @Model.QuestionSet.QuestionSetId;

            var form = $('#__AjaxAntiForgeryForm');
            var token = $('input[name="__RequestVerificationToken"]', form).val();

            $.ajax({
                    type: "POST",
                    url: "/QuestionSet/AddQuestion/" + qsetId,
                    data: {
                        __RequestVerificationToken: token
                    },
                    dataType: "json"
                }).done(function(response, textStatus, jqXHR) {

                    if (!response.isError) {
                        $("#QuestionList").append(response.questionForm);
                    }

                })
                .fail(function(jqXHR, textStatus, errorThrown) {

                })
                .always(function() {
                    setupEvents();
                });

        }


        function removeQuestion(questionId) {


            swal({
                    title: "Are you sure you want to remove this question?",
                    text: "Once deleted, this question will no longer be available.",
                    icon: "warning",
                    buttons: true,
                    dangerMode: true,
                })
                .then((willDelete) => {
                    if (willDelete) {

                        var form = $('#__AjaxAntiForgeryForm');
                        var token = $('input[name="__RequestVerificationToken"]', form).val();

                        $.ajax({
                                type: "POST",
                                url: "/QuestionSet/RemoveQuestion/@Model.QuestionSet.QuestionSetId",
                                data: {
                                    __RequestVerificationToken: token,
                                    QuestionId: questionId
                                },
                                dataType: "json"
                            }).done(function(response, textStatus, jqXHR) {

                                if (!response.isError) {
                                    $("#QuestionList").html(response.questionForm);
                                }

                            })
                            .fail(function(jqXHR, textStatus, errorThrown) {

                            })
                            .always(function() {
                                setupEvents();
                            });

                    }
                });


        }

        function addQuestionOption(questionId, questionIndex) {

            var form = $('#__AjaxAntiForgeryForm');
            var token = $('input[name="__RequestVerificationToken"]', form).val();

            $.ajax({
                    type: "POST",
                    url: "/QuestionSet/AddQuestionOption/" + questionId,
                    data: {
                        __RequestVerificationToken: token,
                        QuestionIndex: questionIndex
                    },
                    dataType: "json"
                }).done(function(response, textStatus, jqXHR) {

                    if (!response.isError) {
                        $("#questionoptionslist_" + questionId).append(response.questionOptionForm);
                    }

                })
                .fail(function(jqXHR, textStatus, errorThrown) {

                })
                .always(function () {
                    setupStyles();
                    setupEvents();
                });

        }

        function removeQuestionOption(questionOptionId, questionIndex) {

            var form = $('#__AjaxAntiForgeryForm');
            var token = $('input[name="__RequestVerificationToken"]', form).val();

            $.ajax({
                    type: "POST",
                    url: "/QuestionSet/RemoveQuestionOption/" + questionOptionId,
                    data: {
                        __RequestVerificationToken: token,
                        QuestionIndex: questionIndex
                    },
                    dataType: "json"
                }).done(function(response, textStatus, jqXHR) {

                    if (!response.isError) {
                        $("#questionoptionslist_" + response.questionOption.questionId).html(response.questionOptionForm);
                    }

                })
                .fail(function(jqXHR, textStatus, errorThrown) {

                })
                .always(function () {
                    setupStyles();
                    setupEvents();
                });
        }


        function displayValidationErrors(errors) {
            $.each(errors,
                function(idx, validationError) {

                    $("span[data-valmsg-for='" + validationError.Key + "']")
                        .text(validationError.Errors[0].ErrorMessage);

                });
        }

        function setRadioStyle(questionid, questiontype) {
            var qclass = "fa fa-circle-o";
            if (questiontype == 2)
                qclass = "fa fa-minus";
            else if (questiontype == 1)
                qclass = "fa fa-square-o";

            // dropdown is fa fa-minus
            // checkbox is fa fa-square-o

            var items = $('#questionoptionslist_' + questionid + ' li');
            items.push($('#questionoptions_add_' + questionid + ' div'));

            items.each(function( index ) {
                //console.log(index + ": " + $(this).text());
                $(this).children('i').removeClass();

                $(this).children('i').addClass(qclass);
            });

        }

        function setupStyles() {

            var items = $('.qtypepicker');

            items.each(function (index) {
                //var questionid = parseInt($(this).attr('id').replace("question_", ""));
                var questionid = $(this).data("questionid");
                var questiontype = $(this).children("option:selected").val();

                if (typeof(questionid) != "undefined" && typeof(questiontype) != "undefined")
                    setRadioStyle(questionid, questiontype);
            });
        }


        function setupEvents() {

            $('.questioneditor-option-delete').off('click');
            $('.questioneditor-addbtn-add').off('click');
            $('.questioneditor-trash').off('click');
            $('select.qtypepicker').off('changed.bs.select');

            $('select.qtypepicker').selectpicker({
                iconBase: 'fa',
                tickIcon: 'fa-check'
            });

            $('select.qtypepicker').on('changed.bs.select', function (e, clickedIndex, isSelected, previousValue) {
                var option = e.target[clickedIndex];
                var type = parseInt(option.value);
                var questionid = $(e.target).data("questionid");

                if (type > 3) {
                    $('#questionoptions_' + questionid).hide();
                    $('#questionoptions_add_' + questionid).hide();
                } else {
                    setRadioStyle(questionid, type);
                    $('#questionoptions_' + questionid).show();
                    $('#questionoptions_add_' + questionid).show();
                }

            });

            $('.questioneditor-addbtn-add').on('click', function() {

                var questionId = $(this).data("questionid");
                var questionIndex = $(this).data("questionindex");

                addQuestionOption(questionId, questionIndex);
            });

            $('.questioneditor-trash').on('click', function() {

                var questionId = $(this).data("questionid");

                removeQuestion(questionId);
            });

            $('.questioneditor-option-delete').on('click', function() {

                var questionOptionId = $(this).data("questionoptionid");
                var questionIndex = $(this).data("questionindex");

                removeQuestionOption(questionOptionId, questionIndex);
            });


            $(".sortable").sortable({
                handle: '.grippy',
                update: function (event, ui) {

                    var questionId = $(this).data("questionid");
                    var questionData = $(this).sortable('serialize');

                    var form = $('#__AjaxAntiForgeryForm');
                    var token = $('input[name="__RequestVerificationToken"]', form).val();

                    var ids = $(this).children().get().map(function(el) {
                        return el.id.replace("answer_", "");
                    });

                    for (k = 0; k < ids.length; k++) {
                        $('#answer_order_' + ids[k]).val(k);
                    }

                    $("#saveMessage").html("Saving...").fadeIn(200);

                    $.ajax({
                            type: "POST",
                            url: "/QuestionSet/SaveQuestionOptionOrder/" + questionId,
                            data: {
                                __RequestVerificationToken: token,
                                id: questionId,
                                order: ids
                            },
                            dataType: "json"
                        }).done(function(response, textStatus, jqXHR) {
                            $("#saveMessage").html("All changes saved");
                        })
                        .fail(function(jqXHR, textStatus, errorThrown) {

                        })
                        .always(function() {
                            $("#saveMessage").delay(4000).fadeOut();

                        });
                }
            });
        }

        $(document).ready(function () {

            $('#QuestionSetForm_@Model.FormId').change(function () {
                saveForm('#QuestionSetForm_@Model.FormId');
            });

            $('#QuestionsForm').change(function () {
                saveQuestionsForm('#QuestionsForm');
            });

            setupEvents();
            setupStyles();


            $(".qsortable").sortable({
                handle: '.grippyhorizontal',
                revert: false,
                start: function(e, ui){
                    ui.placeholder.height(ui.item.height());
                },
                update: function (event, ui) {
                    var item = ui.item;
                    var qsetId = $(this).data("questionsetid");
                    var qdata = $(this).sortable('serialize');

                    var form = $('#__AjaxAntiForgeryForm');
                    var token = $('input[name="__RequestVerificationToken"]', form).val();

                    var ids = $(this).children().get().map(function(el) {
                        return el.id.replace("question_", "");
                    });

                    $("#saveMessage").html("Saving...").fadeIn(200);

                    $.ajax({
                            type: "POST",
                            url: "/QuestionSet/SaveQuestionOrder/" + qsetId,
                            data: {
                                __RequestVerificationToken: token,
                                id: qsetId,
                                order: ids
                            },
                            dataType: "json"
                        }).done(function(response, textStatus, jqXHR) {
                            $("#saveMessage").html("All changes saved");
                        })
                        .fail(function(jqXHR, textStatus, errorThrown) {

                        })
                        .always(function() {
                            $("#saveMessage").delay(4000).fadeOut();

                        });

                }
            });
        });
    </script>

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

}